nu_new <- nu_f(X, param$beta, param$theta, tau_new, L)
print(nu_new)
table(W, apply(nu_new, 1, which.max))
# Test M-step ----
alpha_test <- alpha_f(tau_new)
alpha_test
beta_test <- beta_f(nu_new)
beta_test
theta_test <- theta_f(X, tau_new, nu_new)
theta_test
# LBM test ----
ll <- elbo_f(X, tau_new, nu_new, alpha_test, beta_test, theta_test)
ll
lbm <- lbm_bis(X, Q, L, max_iter=50)
lbm$alpha
lbm$beta
lbm$theta
#lbm$tau
table(Z, apply(lbm$tau, 1, which.max))
#lbm$nu
table(W, apply(lbm$nu, 1, which.max))
image(X)
image(t(X)[ncol(X):1,])
source("LBM_functions.R")
source("utils.R")
source("Mstep.R")
set.seed(111)
# Génération des données ----
# Définition des variables
N = 150
p = 50
Q = 3 #K dans ma thèse
L = 3 #Q dans ma thèse
# Définition des vrais paramètres
alpha = c(0.4, 0.25, 0.35) #Marginale de Z
beta = c(0.3, 0.25, 0.45) #Marginale de W
mu_values <- seq(1,20,by=0.5)
mu <- matrix(sample(mu_values, Q*L, replace=TRUE), Q, L) # param loi normal de X
sig_values <- seq(1,3,by=0.25)
sigma <- matrix(sample(sig_values, Q*L, replace=TRUE),Q,L) # param loi normal de X
theta <- array(NA, dim = c(Q, L, 2))
theta[,,1] <- mu
theta[,,2] <- sigma
# Simulations
Z <- sample(1:Q, N, replace=T, prob=alpha)
W <- sample(1:L, p, replace=T, prob=beta)
Z <- sort(Z)
W <- sort(W)
X <- matrix(NA,N,p)
for(k in 1:Q){
idx_ligne <- which(Z==k)
for(l in 1:L){
idx_colonne <- which(W==l)
X[idx_ligne,idx_colonne] <- rnorm(n=length(idx_ligne)*length(idx_colonne), mean = theta[k,l,1],sd=sqrt(theta[k,l,2]))
}
}
image(X)
image(t(X)[ncol(X):1,])
# Test init ----
param <- init_param(X, Q, L)
param
# Test E-step ----
tau_new <- tau_f(X, param$alpha, param$theta, param$Nu_mat, Q)
print(tau_new)
table(Z, apply(tau_new, 1, which.max))
nu_new <- nu_f(X, param$beta, param$theta, tau_new, L)
print(nu_new)
table(W, apply(nu_new, 1, which.max))
# Test M-step ----
alpha_test <- alpha_f(tau_new)
alpha_test
beta_test <- beta_f(nu_new)
beta_test
theta_test <- theta_f(X, tau_new, nu_new)
theta_test
# LBM test ----
ll <- elbo_f(X, tau_new, nu_new, alpha_test, beta_test, theta_test)
ll
lbm <- lbm_bis(X, Q, L, max_iter=50)
lbm$alpha
lbm$beta
lbm$theta
#lbm$tau
table(Z, apply(lbm$tau, 1, which.max))
#lbm$nu
table(W, apply(lbm$nu, 1, which.max))
mu
sigma
#lbm$tau
table(Z, apply(lbm$tau, 1, which.max))
#lbm$nu
table(W, apply(lbm$nu, 1, which.max))
source("LBM_functions.R")
source("utils.R")
source("Mstep.R")
# Génération des données ----
# Définition des variables
N = 100
p = 60
Q = 2 #K dans ma thèse
L = 3 #Q dans ma thèse
# Définition des vrais paramètres
alpha = c(0.4, 0.6) #Marginale de Z
beta = rbind(c(0.25, 0.25, 0.5),
c(0.4, 0.35, 0.25)) #Marginale de W
mu <- matrix((1:(Q*L)*2),Q,L) # param loi normal de X
sigma2 <- matrix(1,Q,L) # param loi normal de X
theta <- array(NA, dim = c(Q, L, 2))
theta[,,1] <- mu
theta[,,2] <- sigma2
# Simulations
Z <- sample(1:Q, N, replace=T, prob=alpha)
W <- matrix(nrow = 2, ncol = p)
for (i in 1:nrow(beta)) {
W[i, ] <- sample(1:ncol(beta), p, replace = TRUE, prob = beta[i, ])
}
Z <- sort(Z)
W <- t(apply(W, 1, sort))
X <- matrix(NA,N,p)
for(k in 1:Q){
idx_ligne <- which(Z==k)
for(l in 1:L){
idx_colonne <- which(W[k,]==l)
X[idx_ligne,idx_colonne] <- rnorm(n=length(idx_ligne)*length(idx_colonne), mean = theta[k,l,1],sd=sqrt(theta[k,l,2]))
}
}
image(X)
image(t(X)[ncol(X):1,])
# Test init ----
param <- co_init_param(X, Q, L)
param
table(Z, apply(param$Tau_mat, 1, which.max))
table(W[2,], apply(param$Nu_tensor[,,1], 1, which.max))
table(W[1,], apply(param$Nu_tensor[,,2], 1, which.max))
# Test E-step ----
tau_new <- co_tau_f(X, param$alpha, param$theta, param$Nu_tensor, Q)
print(tau_new)
table(Z, apply(tau_new, 1, which.max))
nu_new <- co_nu_f(X, param$beta, param$theta, tau_new, L)
print(nu_new)
table(W[1,], apply(nu_new[,,1], 1, which.max))
table(W[2,], apply(nu_new[,,2], 1, which.max))
# Test M-step ----
alpha_test <- co_alpha_f(tau_new)
alpha_test
beta_test <- co_beta_f(nu_new)
beta_test
theta_test <- co_theta_f(X, tau_new, nu_new)
theta_test
# LBM test ----
ll <- co_elbo_f(X, tau_new, nu_new, alpha_test, beta_test, theta_test)
ll
lbm <- co_lbm(X, Q, L, max_iter=50)
lbm$alpha
lbm$betas
lbm$theta
table(Z, apply(lbm$tau, 1, which.max))
table(W[1,], apply(lbm$nu[,,1], 1, which.max))
table(W[2,], apply(lbm$nu[,,2], 1, which.max))
# OU
table(W[2,], apply(lbm$nu[,,1], 1, which.max))
table(W[1,], apply(lbm$nu[,,2], 1, which.max))
betas
beta
source("LBM_functions.R")
source("utils.R")
source("Mstep.R")
# Génération des données ----
# Définition des variables
N = 100
p = 60
Q = 2 #K dans ma thèse
L = 3 #Q dans ma thèse
set.seed(123)
# Définition des vrais paramètres
alpha = c(0.4, 0.6) #Marginale de Z
beta = rbind(c(0.25, 0.25, 0.5),
c(0.4, 0.35, 0.25)) #Marginale de W
mu <- matrix((1:(Q*L)*2),Q,L) # param loi normal de X
sigma2 <- matrix(1,Q,L) # param loi normal de X
theta <- array(NA, dim = c(Q, L, 2))
theta[,,1] <- mu
theta[,,2] <- sigma2
# Simulations
Z <- sample(1:Q, N, replace=T, prob=alpha)
W <- matrix(nrow = 2, ncol = p)
for (i in 1:nrow(beta)) {
W[i, ] <- sample(1:ncol(beta), p, replace = TRUE, prob = beta[i, ])
}
Z <- sort(Z)
W <- t(apply(W, 1, sort))
X <- matrix(NA,N,p)
for(k in 1:Q){
idx_ligne <- which(Z==k)
for(l in 1:L){
idx_colonne <- which(W[k,]==l)
X[idx_ligne,idx_colonne] <- rnorm(n=length(idx_ligne)*length(idx_colonne), mean = theta[k,l,1],sd=sqrt(theta[k,l,2]))
}
}
image(X)
image(t(X)[ncol(X):1,])
# Test init ----
param <- co_init_param(X, Q, L)
param
table(Z, apply(param$Tau_mat, 1, which.max))
table(W[2,], apply(param$Nu_tensor[,,1], 1, which.max))
table(W[1,], apply(param$Nu_tensor[,,2], 1, which.max))
# Test E-step ----
tau_new <- co_tau_f(X, param$alpha, param$theta, param$Nu_tensor, Q)
print(tau_new)
table(Z, apply(tau_new, 1, which.max))
nu_new <- co_nu_f(X, param$beta, param$theta, tau_new, L)
print(nu_new)
table(W[1,], apply(nu_new[,,1], 1, which.max))
table(W[2,], apply(nu_new[,,2], 1, which.max))
# Test M-step ----
alpha_test <- co_alpha_f(tau_new)
alpha_test
beta_test <- co_beta_f(nu_new)
beta_test
theta_test <- co_theta_f(X, tau_new, nu_new)
theta_test
# LBM test ----
ll <- co_elbo_f(X, tau_new, nu_new, alpha_test, beta_test, theta_test)
ll
lbm <- co_lbm(X, Q, L, max_iter=50)
lbm$alpha
lbm$betas
lbm$theta
table(Z, apply(lbm$tau, 1, which.max))
table(W[1,], apply(lbm$nu[,,1], 1, which.max))
table(W[2,], apply(lbm$nu[,,2], 1, which.max))
# OU
table(W[2,], apply(lbm$nu[,,1], 1, which.max))
table(W[1,], apply(lbm$nu[,,2], 1, which.max))
source("LBM_functions.R")
source("utils.R")
source("Mstep.R")
set.seed(111)
# Génération des données ----
# Définition des variables
N = 150
p = 50
Q = 3 #K dans ma thèse
L = 3 #Q dans ma thèse
# Définition des vrais paramètres
alpha = c(0.4, 0.25, 0.35) #Marginale de Z
beta = c(0.3, 0.25, 0.45) #Marginale de W
mu_values <- seq(1,20,by=0.5)
mu <- matrix(sample(mu_values, Q*L, replace=TRUE), Q, L) # param loi normal de X
sig_values <- seq(1,3,by=0.25)
sigma <- matrix(sample(sig_values, Q*L, replace=TRUE),Q,L) # param loi normal de X
theta <- array(NA, dim = c(Q, L, 2))
theta[,,1] <- mu
theta[,,2] <- sigma
# Simulations
Z <- sample(1:Q, N, replace=T, prob=alpha)
W <- sample(1:L, p, replace=T, prob=beta)
Z <- sort(Z)
W <- sort(W)
X <- matrix(NA,N,p)
for(k in 1:Q){
idx_ligne <- which(Z==k)
for(l in 1:L){
idx_colonne <- which(W==l)
X[idx_ligne,idx_colonne] <- rnorm(n=length(idx_ligne)*length(idx_colonne), mean = theta[k,l,1],sd=sqrt(theta[k,l,2]))
}
}
image(X)
image(t(X)[ncol(X):1,])
# Test init ----
param <- init_param(X, Q, L)
param
# Test E-step ----
tau_new <- tau_f(X, param$alpha, param$theta, param$Nu_mat, Q)
print(tau_new)
table(Z, apply(tau_new, 1, which.max))
nu_new <- nu_f(X, param$beta, param$theta, tau_new, L)
print(nu_new)
table(W, apply(nu_new, 1, which.max))
# Test M-step ----
alpha_test <- alpha_f(tau_new)
alpha_test
beta_test <- beta_f(nu_new)
beta_test
theta_test <- theta_f(X, tau_new, nu_new)
theta_test
# LBM test ----
ll <- elbo_f(X, tau_new, nu_new, alpha_test, beta_test, theta_test)
ll
lbm <- lbm_bis(X, Q, L, max_iter=50)
lbm$alpha
lbm$beta
lbm$theta
#lbm$tau
table(Z, apply(lbm$tau, 1, which.max))
#lbm$nu
table(W, apply(lbm$nu, 1, which.max))
# ------ Co LBM --------
source("LBM_functions.R")
source("utils.R")
source("Mstep.R")
# Génération des données ----
# Définition des variables
N = 100
p = 60
Q = 2 #K dans ma thèse
L = 3 #Q dans ma thèse
set.seed(89)
# Définition des vrais paramètres
alpha = c(0.4, 0.6) #Marginale de Z
beta = rbind(c(0.25, 0.25, 0.5),
c(0.4, 0.35, 0.25)) #Marginale de W
mu_values <- seq(1,20,by=0.5)
mu <- matrix(sample(mu_values, Q*L, replace=TRUE), Q, L) # param loi normal de X
sig_values <- seq(1,3,by=0.25)
sigma <- matrix(sample(sig_values, Q*L, replace=TRUE),Q,L) # param loi normal de X
theta <- array(NA, dim = c(Q, L, 2))
theta[,,1] <- mu
theta[,,2] <- sigma
# Simulations
Z <- sample(1:Q, N, replace=T, prob=alpha)
W <- matrix(nrow = 2, ncol = p)
for (i in 1:nrow(beta)) {
W[i, ] <- sample(1:ncol(beta), p, replace = TRUE, prob = beta[i, ])
}
Z <- sort(Z)
W <- t(apply(W, 1, sort))
X <- matrix(NA,N,p)
for(k in 1:Q){
idx_ligne <- which(Z==k)
for(l in 1:L){
idx_colonne <- which(W[k,]==l)
X[idx_ligne,idx_colonne] <- rnorm(n=length(idx_ligne)*length(idx_colonne), mean = theta[k,l,1],sd=sqrt(theta[k,l,2]))
}
}
image(X)
image(t(X)[ncol(X):1,])
# Test init ----
param <- co_init_param(X, Q, L)
param
table(Z, apply(param$Tau_mat, 1, which.max))
table(W[2,], apply(param$Nu_tensor[,,1], 1, which.max))
table(W[1,], apply(param$Nu_tensor[,,2], 1, which.max))
# Test E-step ----
tau_new <- co_tau_f(X, param$alpha, param$theta, param$Nu_tensor, Q)
print(tau_new)
table(Z, apply(tau_new, 1, which.max))
nu_new <- co_nu_f(X, param$beta, param$theta, tau_new, L)
print(nu_new)
table(W[1,], apply(nu_new[,,1], 1, which.max))
table(W[2,], apply(nu_new[,,2], 1, which.max))
# Test M-step ----
alpha_test <- co_alpha_f(tau_new)
alpha_test
beta_test <- co_beta_f(nu_new)
beta_test
theta_test <- co_theta_f(X, tau_new, nu_new)
theta_test
# LBM test ----
ll <- co_elbo_f(X, tau_new, nu_new, alpha_test, beta_test, theta_test)
ll
lbm <- co_lbm(X, Q, L, max_iter=50)
lbm$alpha
lbm$betas
lbm$theta
table(Z, apply(lbm$tau, 1, which.max))
table(W[1,], apply(lbm$nu[,,1], 1, which.max))
table(W[2,], apply(lbm$nu[,,2], 1, which.max))
# OU
table(W[2,], apply(lbm$nu[,,1], 1, which.max))
table(W[1,], apply(lbm$nu[,,2], 1, which.max))
source("LBM_functions.R")
source("utils.R")
source("Mstep.R")
##############################################################################
###### This file contains tests for the classical and conditionals LBMs ######
##############################################################################
set.seed(111)
# Génération des données ----
# Définition des variables
N = 150
p = 50
Q = 3 #K dans ma thèse
L = 3 #Q dans ma thèse
# Définition des vrais paramètres
alpha = c(0.4, 0.25, 0.35) #Marginale de Z
beta = c(0.3, 0.25, 0.45) #Marginale de W
mu_values <- seq(1,20,by=0.5)
mu <- matrix(sample(mu_values, Q*L, replace=TRUE), Q, L) # param loi normal de X
sig_values <- seq(1,3,by=0.25)
sigma <- matrix(sample(sig_values, Q*L, replace=TRUE),Q,L) # param loi normal de X
theta <- array(NA, dim = c(Q, L, 2))
theta[,,1] <- mu
theta[,,2] <- sigma
# Simulations
Z <- sample(1:Q, N, replace=T, prob=alpha)
W <- sample(1:L, p, replace=T, prob=beta)
Z <- sort(Z)
W <- sort(W)
X <- matrix(NA,N,p)
for(k in 1:Q){
idx_ligne <- which(Z==k)
for(l in 1:L){
idx_colonne <- which(W==l)
X[idx_ligne,idx_colonne] <- rnorm(n=length(idx_ligne)*length(idx_colonne), mean = theta[k,l,1],sd=sqrt(theta[k,l,2]))
}
}
image(X)
image(t(X)[ncol(X):1,])
# Test init ----
param <- init_param(X, Q, L)
param
# Test E-step ----
tau_new <- tau_f(X, param$alpha, param$theta, param$Nu_mat, Q)
print(tau_new)
table(Z, apply(tau_new, 1, which.max))
nu_new <- nu_f(X, param$beta, param$theta, tau_new, L)
print(nu_new)
table(W, apply(nu_new, 1, which.max))
# Test M-step ----
alpha_test <- alpha_f(tau_new)
alpha_test
beta_test <- beta_f(nu_new)
beta_test
theta_test <- theta_f(X, tau_new, nu_new)
theta_test
# LBM test ----
ll <- elbo_f(X, tau_new, nu_new, alpha_test, beta_test, theta_test)
ll
lbm <- lbm_bis(X, Q, L, max_iter=50)
lbm$alpha
lbm$beta
lbm$theta
#lbm$tau
table(Z, apply(lbm$tau, 1, which.max))
#lbm$nu
table(W, apply(lbm$nu, 1, which.max))
# ------ Co LBM --------
source("LBM_functions.R")
source("utils.R")
source("Mstep.R")
# Génération des données ----
# Définition des variables
N = 100
p = 60
Q = 2 #K dans ma thèse
L = 3 #Q dans ma thèse
set.seed(89)
# Définition des vrais paramètres
alpha = c(0.4, 0.6) #Marginale de Z
beta = rbind(c(0.25, 0.25, 0.5),
c(0.4, 0.35, 0.25)) #Marginale de W
mu_values <- seq(1,20,by=0.5)
mu <- matrix(sample(mu_values, Q*L, replace=TRUE), Q, L) # param loi normal de X
sig_values <- seq(1,3,by=0.25)
sigma <- matrix(sample(sig_values, Q*L, replace=TRUE),Q,L) # param loi normal de X
theta <- array(NA, dim = c(Q, L, 2))
theta[,,1] <- mu
theta[,,2] <- sigma
# Simulations
Z <- sample(1:Q, N, replace=T, prob=alpha)
W <- matrix(nrow = 2, ncol = p)
for (i in 1:nrow(beta)) {
W[i, ] <- sample(1:ncol(beta), p, replace = TRUE, prob = beta[i, ])
}
Z <- sort(Z)
W <- t(apply(W, 1, sort))
X <- matrix(NA,N,p)
for(k in 1:Q){
idx_ligne <- which(Z==k)
for(l in 1:L){
idx_colonne <- which(W[k,]==l)
X[idx_ligne,idx_colonne] <- rnorm(n=length(idx_ligne)*length(idx_colonne), mean = theta[k,l,1],sd=sqrt(theta[k,l,2]))
}
}
image(X)
image(t(X)[ncol(X):1,])
# Test init ----
param <- co_init_param(X, Q, L)
param
table(Z, apply(param$Tau_mat, 1, which.max))
table(W[2,], apply(param$Nu_tensor[,,1], 1, which.max))
table(W[1,], apply(param$Nu_tensor[,,2], 1, which.max))
# Test E-step ----
tau_new <- co_tau_f(X, param$alpha, param$theta, param$Nu_tensor, Q)
print(tau_new)
table(Z, apply(tau_new, 1, which.max))
nu_new <- co_nu_f(X, param$beta, param$theta, tau_new, L)
print(nu_new)
table(W[1,], apply(nu_new[,,1], 1, which.max))
table(W[2,], apply(nu_new[,,2], 1, which.max))
# Test M-step ----
alpha_test <- co_alpha_f(tau_new)
alpha_test
beta_test <- co_beta_f(nu_new)
beta_test
theta_test <- co_theta_f(X, tau_new, nu_new)
theta_test
# LBM test ----
ll <- co_elbo_f(X, tau_new, nu_new, alpha_test, beta_test, theta_test)
ll
lbm <- co_lbm(X, Q, L, max_iter=50)
lbm$alpha
lbm$betas
lbm$theta
table(Z, apply(lbm$tau, 1, which.max))
table(W[1,], apply(lbm$nu[,,1], 1, which.max))
table(W[2,], apply(lbm$nu[,,2], 1, which.max))
# OU
table(W[2,], apply(lbm$nu[,,1], 1, which.max))
table(W[1,], apply(lbm$nu[,,2], 1, which.max))
